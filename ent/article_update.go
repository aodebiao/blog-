// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aodebiao/ent/article"
	"aodebiao/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleMutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (au *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArticleUpdate) SetUpdatedAt(t time.Time) *ArticleUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *ArticleUpdate) ClearUpdatedAt() *ArticleUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *ArticleUpdate) SetDeletedAt(t time.Time) *ArticleUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDeletedAt(t *time.Time) *ArticleUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *ArticleUpdate) ClearDeletedAt() *ArticleUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDelFlag sets the "del_flag" field.
func (au *ArticleUpdate) SetDelFlag(i int) *ArticleUpdate {
	au.mutation.ResetDelFlag()
	au.mutation.SetDelFlag(i)
	return au
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDelFlag(i *int) *ArticleUpdate {
	if i != nil {
		au.SetDelFlag(*i)
	}
	return au
}

// AddDelFlag adds i to the "del_flag" field.
func (au *ArticleUpdate) AddDelFlag(i int) *ArticleUpdate {
	au.mutation.AddDelFlag(i)
	return au
}

// ClearDelFlag clears the value of the "del_flag" field.
func (au *ArticleUpdate) ClearDelFlag() *ArticleUpdate {
	au.mutation.ClearDelFlag()
	return au
}

// SetCategoryID sets the "category_id" field.
func (au *ArticleUpdate) SetCategoryID(s string) *ArticleUpdate {
	au.mutation.SetCategoryID(s)
	return au
}

// SetContent sets the "content" field.
func (au *ArticleUpdate) SetContent(s string) *ArticleUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableContent(s *string) *ArticleUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// ClearContent clears the value of the "content" field.
func (au *ArticleUpdate) ClearContent() *ArticleUpdate {
	au.mutation.ClearContent()
	return au
}

// SetStatus sets the "status" field.
func (au *ArticleUpdate) SetStatus(i int8) *ArticleUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableStatus(i *int8) *ArticleUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *ArticleUpdate) AddStatus(i int8) *ArticleUpdate {
	au.mutation.AddStatus(i)
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *ArticleUpdate) ClearStatus() *ArticleUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetCoverURL sets the "cover_url" field.
func (au *ArticleUpdate) SetCoverURL(s string) *ArticleUpdate {
	au.mutation.SetCoverURL(s)
	return au
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableCoverURL(s *string) *ArticleUpdate {
	if s != nil {
		au.SetCoverURL(*s)
	}
	return au
}

// ClearCoverURL clears the value of the "cover_url" field.
func (au *ArticleUpdate) ClearCoverURL() *ArticleUpdate {
	au.mutation.ClearCoverURL()
	return au
}

// Mutation returns the ArticleMutation object of the builder.
func (au *ArticleUpdate) Mutation() *ArticleMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArticleUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks[int, ArticleMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArticleUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ArticleUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := article.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *ArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(article.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(article.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(article.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(article.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DelFlag(); ok {
		_spec.SetField(article.FieldDelFlag, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDelFlag(); ok {
		_spec.AddField(article.FieldDelFlag, field.TypeInt, value)
	}
	if au.mutation.DelFlagCleared() {
		_spec.ClearField(article.FieldDelFlag, field.TypeInt)
	}
	if value, ok := au.mutation.CategoryID(); ok {
		_spec.SetField(article.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if au.mutation.ContentCleared() {
		_spec.ClearField(article.FieldContent, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(article.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(article.FieldStatus, field.TypeInt8, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(article.FieldStatus, field.TypeInt8)
	}
	if value, ok := au.mutation.CoverURL(); ok {
		_spec.SetField(article.FieldCoverURL, field.TypeString, value)
	}
	if au.mutation.CoverURLCleared() {
		_spec.ClearField(article.FieldCoverURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArticleUpdateOne) SetUpdatedAt(t time.Time) *ArticleUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *ArticleUpdateOne) ClearUpdatedAt() *ArticleUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *ArticleUpdateOne) SetDeletedAt(t time.Time) *ArticleUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDeletedAt(t *time.Time) *ArticleUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *ArticleUpdateOne) ClearDeletedAt() *ArticleUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDelFlag sets the "del_flag" field.
func (auo *ArticleUpdateOne) SetDelFlag(i int) *ArticleUpdateOne {
	auo.mutation.ResetDelFlag()
	auo.mutation.SetDelFlag(i)
	return auo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDelFlag(i *int) *ArticleUpdateOne {
	if i != nil {
		auo.SetDelFlag(*i)
	}
	return auo
}

// AddDelFlag adds i to the "del_flag" field.
func (auo *ArticleUpdateOne) AddDelFlag(i int) *ArticleUpdateOne {
	auo.mutation.AddDelFlag(i)
	return auo
}

// ClearDelFlag clears the value of the "del_flag" field.
func (auo *ArticleUpdateOne) ClearDelFlag() *ArticleUpdateOne {
	auo.mutation.ClearDelFlag()
	return auo
}

// SetCategoryID sets the "category_id" field.
func (auo *ArticleUpdateOne) SetCategoryID(s string) *ArticleUpdateOne {
	auo.mutation.SetCategoryID(s)
	return auo
}

// SetContent sets the "content" field.
func (auo *ArticleUpdateOne) SetContent(s string) *ArticleUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableContent(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// ClearContent clears the value of the "content" field.
func (auo *ArticleUpdateOne) ClearContent() *ArticleUpdateOne {
	auo.mutation.ClearContent()
	return auo
}

// SetStatus sets the "status" field.
func (auo *ArticleUpdateOne) SetStatus(i int8) *ArticleUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableStatus(i *int8) *ArticleUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *ArticleUpdateOne) AddStatus(i int8) *ArticleUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *ArticleUpdateOne) ClearStatus() *ArticleUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetCoverURL sets the "cover_url" field.
func (auo *ArticleUpdateOne) SetCoverURL(s string) *ArticleUpdateOne {
	auo.mutation.SetCoverURL(s)
	return auo
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableCoverURL(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetCoverURL(*s)
	}
	return auo
}

// ClearCoverURL clears the value of the "cover_url" field.
func (auo *ArticleUpdateOne) ClearCoverURL() *ArticleUpdateOne {
	auo.mutation.ClearCoverURL()
	return auo
}

// Mutation returns the ArticleMutation object of the builder.
func (auo *ArticleUpdateOne) Mutation() *ArticleMutation {
	return auo.mutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (auo *ArticleUpdateOne) Where(ps ...predicate.Article) *ArticleUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Article entity.
func (auo *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	auo.defaults()
	return withHooks[*Article, ArticleMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ArticleUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := article.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(article.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(article.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(article.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(article.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DelFlag(); ok {
		_spec.SetField(article.FieldDelFlag, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDelFlag(); ok {
		_spec.AddField(article.FieldDelFlag, field.TypeInt, value)
	}
	if auo.mutation.DelFlagCleared() {
		_spec.ClearField(article.FieldDelFlag, field.TypeInt)
	}
	if value, ok := auo.mutation.CategoryID(); ok {
		_spec.SetField(article.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if auo.mutation.ContentCleared() {
		_spec.ClearField(article.FieldContent, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(article.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(article.FieldStatus, field.TypeInt8, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(article.FieldStatus, field.TypeInt8)
	}
	if value, ok := auo.mutation.CoverURL(); ok {
		_spec.SetField(article.FieldCoverURL, field.TypeString, value)
	}
	if auo.mutation.CoverURLCleared() {
		_spec.ClearField(article.FieldCoverURL, field.TypeString)
	}
	_node = &Article{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
